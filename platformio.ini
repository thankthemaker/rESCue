; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = wemos_d1_mini32
;default_envs = nodemcu-32s
;default_envs = avaspark-rgb
;default_envs = lolin_wemos_s3_mini
;default_envs = featheresp32

[common_env_data]
lib_deps_external =
    adafruit/Adafruit NeoPixel @ ^1.11.0
    bakercp/Logger @ 1.0.3
    h2zero/NimBLE-Arduino@1.4.1
    fabianoriccardi/Melody Player @ ^2.2.2
    bblanchon/ArduinoJson @ ^6.21.2
    paulo-raca/Buffered Streams @ ^1.0.8

[ESP32]
build_flags=
  -D PIN_NEOPIXEL=4    ; DIN of WS28xx stripe for front- / backlight, only needed if WS28xx is used
  -D MOSFET_PIN_1=22   ; PWM signal for MOSFET 1 (front white, back red), only needed if COB is used
  -D MOSFET_PIN_2=23   ; PWM signal for MOSFET 2 (front red, back white), only needed if COB is used
  -D PIN_FORWARD=18    ; digital signal from Cheap Focer 2 if direction is forward
  -D PIN_BACKWARD=19   ; digital signal from Cheap Focer 2 if direction is backward
  -D PIN_BRAKE=21      ; digital signal from Cheap Focer 2 if electric motor brakes is on
  -D BUZPIN=25         ; PIN for Piezo buzzer for acoustic signals (e.g. battery warning)
  -D BATTERY_PIN=34    ; analog input for battery monitor, connected to voltage divider
  -D LIGHT_BAR_PIN=2   ; DIN of WS28xx for battery indicator
  -D VESC_RX_PIN=16    ; UART RX to Cheap Focer 2, connent to TX on CF2
  -D VESC_TX_PIN=17    ; UART TX to Cheap Focer 2, connent to RX on CF2
  -D CAN_TX_PIN=_26
  -D CAN_RX_PIN=_27

[ESP32-S3]
build_flags=
  -D PIN_NEOPIXEL=3    ; DIN of WS28xx stripe for front- / backlight, only needed if WS28xx is used
;  -D MOSFET_PIN_1=     ; PWM signal for MOSFET 1 (front white, back red), only needed if COB is used
;  -D MOSFET_PIN_2=     ; PWM signal for MOSFET 2 (front red, back white), only needed if COB is used
  -D PIN_FORWARD=11    ; digital signal from Cheap Focer 2 if direction is forward
  -D PIN_BACKWARD=12   ; digital signal from Cheap Focer 2 if direction is backward
  -D PIN_BRAKE=13      ; digital signal from Cheap Focer 2 if electric motor brakes is on
  -D BUZPIN=38         ; PIN for Piezo buzzer for acoustic signals (e.g. battery warning)
  -D BATTERY_PIN=33      ; analog input for battery monitor, connected to voltage divider
  -D LIGHT_BAR_PIN=2   ; DIN of WS28xx for battery indicator
  -D VESC_RX_PIN=9     ; UART RX to Cheap Focer 2, connent to TX on CF2
  -D VESC_TX_PIN=10    ; UART TX to Cheap Focer 2, connent to RX on CF2
  -D CAN_TX_PIN=16
  -D CAN_RX_PIN=17
  -D ESP32S3

[AVASPARK-RGB]
build_flags=
  -D PIN_NEOPIXEL_FRONT=18    ; DIN of WS28xx stripe for front light, only needed if WS28xx is used
  -D PIN_NEOPIXEL_BACK=17     ; DIN of WS28xx stripe for back light, only needed if WS28xx is used
  ;-D MOSFET_PIN_1=22   ; PWM signal for MOSFET 1 (front white, back red), only needed if COB is used
  ;-D MOSFET_PIN_2=23   ; PWM signal for MOSFET 2 (front red, back white), only needed if COB is used
  ;-D PIN_FORWARD=18    ; digital signal from Cheap Focer 2 if direction is forward
  ;-D PIN_BACKWARD=19   ; digital signal from Cheap Focer 2 if direction is backward
  ;-D PIN_BRAKE=21      ; digital signal from Cheap Focer 2 if electric motor brakes is on
  -D BUZPIN=4         ; PIN for Piezo buzzer for acoustic signals (e.g. battery warning)
  -D BATTERY_PIN=34    ; analog input for battery monitor, connected to voltage divider
  -D LIGHT_BAR_PIN=19   ; DIN of WS28xx for battery indicator
  ;-D VESC_RX_PIN=32    ; UART RX to Cheap Focer 2, connent to TX on CF2
  ;-D VESC_TX_PIN=33    ; UART TX to Cheap Focer 2, connent to RX on CF2
  -D CAN_TX_PIN=_33
  -D CAN_RX_PIN=_32
  -D PIN_BOARD_LED=16 ; Onboard LED for avaspark-rgb
  -D BMS_TX_PIN=23 ; Map UART RX to BMS TX Pin
  -D BMS_ON_PIN=25 ; Map GPIO to trigger IRF540N 100v N-channel mosfet which emulates momentary button for OWIE BMS on (battery voltage on blue wire) to ground. Connect the Source pin of the MOSFET to ground. Connect the Drain pin to the BMS's wake-up wire. Connect the Gate pin to the microcontroller's TX pin.

[env:native]
platform = native

[env:wemos_d1_mini32]
platform = espressif32
board = wemos_d1_mini32
framework = arduino
monitor_speed = 115200
upload_Speed = 921600
#upload_Port = /dev/cu.wchusbserial54FC0080641
board_build.partitions = default.csv
lib_deps = ${common_env_data.lib_deps_external}
build_flags = ${ESP32.build_flags} -D LED_WS28xx -D CANBUS_ENABLED -D CANBUS_ONLY
monitor_filters =
    time
    esp32_exception_decoder
; build_type = debug
extra_scripts = pre:change_firmware_name.py
custom_firmware_name = firmware_wemos_d1_mini32

[env:wemos_d1_mini32_cob]
extends = env:wemos_d1_mini32
build_flags = ${ESP32.build_flags} -D LED_COB -D CANBUS_ENABLED -D CANBUS_ONLY
custom_firmware_name = firmware_wemos_d1_mini32_cob

[env:wemos_d1_mini32_uart]
extends = env:wemos_d1_mini32
build_flags = ${ESP32.build_flags} -D LED_WS28xx
custom_firmware_name = firmware_wemos_d1_mini32_uart

[env:wemos_d1_mini32_cob_uart]
extends = env:wemos_d1_mini32
build_flags = ${ESP32.build_flags} -D LED_COB
custom_firmware_name = firmware_wemos_d1_mini32_cob_uart

[env:nodemcu-32s]
platform = espressif32
board = nodemcu-32s
framework = arduino
monitor_speed = 115200
board_build.partitions = default.csv
lib_deps =
    ${common_env_data.lib_deps_external}
build_flags =
     ${ESP32.build_flags} -D LED_WS28xx -D CANBUS_ENABLED -D CANBUS_ONLY
extra_scripts = pre:change_firmware_name.py
custom_firmware_name = firmware_nodemcu-32s

[env:avaspark-rgb]
platform = espressif32
board = nodemcu-32s
framework = arduino
monitor_speed = 115200
board_build.partitions = default.csv
lib_deps =
    ${common_env_data.lib_deps_external}
build_flags =
     ${AVASPARK-RGB.build_flags} -D LED_WS28xx -D CANBUS_ENABLED -D CANBUS_ONLY
extra_scripts = pre:change_firmware_name.py
custom_firmware_name = firmware_avaspark-rgb

[env:lolin_wemos_s3_mini]
platform = espressif32
board = lolin_s3_mini
framework = arduino
monitor_speed = 115200
upload_Speed = 921600
board_build.partitions = default.csv
lib_deps = ${common_env_data.lib_deps_external}
build_flags = ${ESP32-S3.build_flags} -D LED_WS28xx -D CANBUS_ENABLED -D CANBUS_ONLY
monitor_filters =
    time
    esp32_exception_decoder
; build_type = debug
extra_scripts = pre:change_firmware_name.py
custom_firmware_name = firmware_lolin_wemos_s3_mini

[env:lolin_wemos_s3_mini_cob]
extends = env:lolin_wemos_s3_mini
build_flags = ${ESP32-S3.build_flags} -D LED_COB -D CANBUS_ENABLED -D CANBUS_ONLY
custom_firmware_name = firmware_lolin_wemos_s3_mini_cob

[env:lolin_wemos_s3_mini_uart]
extends = env:lolin_wemos_s3_mini
build_flags = ${ESP32-S3.build_flags} -D LED_WS28xx
custom_firmware_name = firmware_lolin_wemos_s3_mini_uart

[env:lolin_wemos_s3_mini_cob_uart]
extends = env:lolin_wemos_s3_mini
build_flags = ${ESP32-S3.build_flags} -D LED_COB
custom_firmware_name = firmware_lolin_wemos_s3_mini_cob_uart


[env:featheresp32]
platform = espressif32
board = featheresp32
framework = arduino
monitor_speed = 115200
upload_Speed = 921600
board_build.partitions = default.csv
lib_deps = ${common_env_data.lib_deps_external}
build_flags = ${ESP32.build_flags} -D LED_WS28xx -D CANBUS_ENABLED -D CANBUS_ONLY

